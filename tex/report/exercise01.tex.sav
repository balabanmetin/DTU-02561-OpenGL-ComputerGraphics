\chapter{Exercise 1}
\label{sec:ugeopgave-1}

The purpose of this exercise is to give a short introduction to create, edit, link and run C/C++ programs that are based on the graphics library OpenGL, and the utility libraries Angel and GLUT.

\section{Part 1}
\label{sec:del-1}

I have added the duties and meanings of functions as comments in source file.\\
The extra white triangle can be seen in Figure \ref{fig:1-1-1}.

\begin{figure}[hp]
\centering
\includegraphics[width=8cm]{../Screenshots/ex-1/1.png}
\caption{White Triangle}
\label{fig:1-1-1}
\end{figure}


\section{Part 2}
\label{sec:del-2}

I understand the overall structure of the program. I extend the the program with a red triangle according to given description. Then I translate the triangle with the vector (6,7,0) by modifying modelView-matrix. I define the colors of the vertices accordingly. Finally I rotate the rectangle 45 counter-clockwise around its middle point. The result is captured by a screenshot, given in Figure \ref{fig:1-2-1}.

\begin{figure}[hp]
\centering
\includegraphics[width=8cm]{../Screenshots/ex-1/2.png}
\caption{Resulting scene}
\label{fig:1-2-1}
\end{figure}


\section{Part 3}
\label{sec:del-3}

\begin{itemize}
  \item glDrawArrays uses vertices in given order. Unlike glDrawArrays, glDrawArrays can use the vertices array elements in any order.
  \item GL\_TRIANGLES: Draws triangles on screen. Every three vertices specified compose a triangle.\\
GL\_TRIANGLE\_STRIP: Draws connected triangles on screen. Every vertex specified after first three vertices creates a triangle.\\
GL\_TRIANGLE\_FAN: Draws connected triangles like GL\_TRIANGLE\_STRIP, except draws triangles in fan shape.
\end{itemize}
%
You can see resulting screenshot of extension in Figure \ref{fig:1-3-1}.

\begin{figure}[hp]
\centering
\includegraphics[width=8cm]{../Screenshots/ex-1/3.png}
\caption{Yellow Triangles}
\label{fig:1-3-1}
\end{figure}

\section{Part 4}
\label{sec:del-4}

You can see resulting screenshot of extension in Figure \ref{fig:1-4-1} 

\begin{figure}[hp]
\centering
\includegraphics[width=8cm]{../Screenshots/ex-1/4.png}
\caption{A (not a perfect) Circle}
\label{fig:1-4-1}
\end{figure}

\section{Part 5}
\label{sec:del-5}

I denne delopgave skulle vi tegne en cirkel. Til dette har vi brugt
\texttt{GL\_LINE\_LOOP} til at tegne 360 cirkelstykker, hvor
x- og y-koordinaterne er beregnet vha. hhv. $cos$ og $sin$. Til at
tegne en solid cirkel har vi lavet 360 trekanter, hvor de to hjørner
er de samme som start- og slut-punkterne for linjestykkerne fra før og
det sidste hjørne på trekanten er cirklens centrum. Linjecirklen kan
ses på figur \ref{fig:1-5-1} mens den udfyldte (og flerfarvede) cirkel
kan ses på figur \ref{fig:1-5-2}.

\begin{figure}[hp]
\centering
\includegraphics[width=8cm]{../exercise1/part5/screenshots/part5_1.png}
\caption{Linjecirkel}
\label{fig:1-5-1}
\end{figure}

\begin{figure}[hp]
\centering
\includegraphics[width=8cm]{../exercise1/part5/screenshots/part5_2.png}
\caption{Udfyldt (flerfarvet) cirkel}
\label{fig:1-5-2}
\end{figure}

\section{Del 6}
\label{sec:del-6}

Vi har et \emph{window}/\emph{viewport}-par, der er defineret ved
koordinatparrene
%
\[
[(x_{wmin}, y_{wmin}),~ (x_{wmax}, y_{wmax})]
\]
%
samt
%
\[
[(x_{vmin}, y_{vmin}),~ (x_{vmax}, y_{vmax})]
\]
%
En transformation fra $(x_w, y_w)$ til $(x_v, y_v)$ kan defineres ved
de tre operationer:

\begin{itemize}
\item Translatering (til $(0,0)$)
\item Skalering
\item Translatering (tilbage)
\end{itemize}

Dermed er hele operationen, $M$, givet ved:
%
\begin{align*}
M = & T \left( x_{vmin},~y_{vmin} \right) \cdot \\
    & S \left(
        \dfrac{x_{vmax} - x_{vmin}}{x_{wmax} - x_{wmin}},~
        \dfrac{y_{vmax} - y_{vmin}}{y_{wmax} - y_{wmin}}
       \right)\cdot \\
    & T \left( x_{wmin},~y_{wmin} \right)
\end{align*}
%
Den sidste tranlatering er angivet først, da man regner baglæns.

Matricerne for ovenstående, og det samlede resultat, $M$, vil dermed
være:

\begin{align*}
  M = & \begin{bmatrix}
          1 & 0 & x_{vmin} \\ 0 & 1 & y_{vmin} \\ 0 & 0 & 1
        \end{bmatrix} \cdot \\
      & \begin{bmatrix}
          \dfrac{x_{vmax} - x_{vmin}}{x_{wmax} - x_{wmin}} & 0 & 0 \\
          0 & \dfrac{y_{vmax} - y_{vmin}}{y_{wmax} - y_{wmin}} & 0 \\
          0 & 0 & 1
        \end{bmatrix} \cdot \\
      & \begin{bmatrix}
          1 & 0 & -x_{wmin} \\
          0 & 1 & -y_{wmin} \\
          0 & 0 & 1
        \end{bmatrix} \\
    = & \begin{bmatrix}
          \dfrac{x_{vmax} - x_{vmin}}{x_{wmax} - x_{wmin}} & 0 &
          -x_{wmin} \cdot \dfrac{x_{vmax} - x_{vmin}}{x_{wmax} -
            x_{wmin}} + x_{vmin} \\
          0 & \dfrac{y_{vmax} - y_{vmin}}{y_{wmax} - y_{wmin}} &
          y_{wmin} \cdot \dfrac{y_{vmax} - y_{vmin}}{y_{wmax} -
            y_{wmin}} + y_{vmin} \\
          0 & 0 & 1
        \end{bmatrix}
\end{align*}

Multipliceres $M$ med et punkt $p$ med koordinaterne $(x,~y,~1)$ fås
resultatet $p'$:

\begin{align*}
  p' = & M \cdot p \\
     = &
  \begin{bmatrix}
    \left(x - x_{wmin}\right) \cdot
    \frac{x_{vmax} - x_{vmin}}{x_{wmax} - x_{wmin}} + x_{vmin} &
    \left( y - y_{wmin} \right) \cdot
    \frac{y_{vmax} - y_{vmin}}{y_{wmax} - y_{wmin}} + y_{vmin} &
    1
  \end{bmatrix}
\end{align*}

\section{Del 7}
\label{sec:del-7}

Kørsel af programmet inden de ønskede operationer er udført kan ses på
figur \ref{fig:1-7-1}. Det kan her ses, at Yw-aksen som Yo-aksen også
vender opad.

Vi har udført de tre operationer i omvendt rækkefølge i OpenGL. Det
vil sige først \texttt{glTranslate}, dernæst \texttt{glRotate} og til
sidst \texttt{glScale}. Med en skalering til dobbelt størrelse, har vi
forstået dobbelt sidestørrelse. Resultatet af dette, kan ses på figur
\ref{fig:1-7-2}. Det kan her ses, at midten af terningen er i samme
højde som det øverste punkt i linjen fra $(1,0,0)$ til $(1,3,0)$.

Hvis operationerne blev udført i den ``naturlige'' rækkefølge, var
resultatet som ses på figur \ref{fig:1-7-3}, hvor man kan se at
translateringen også er blevet skaleret med en faktor to.

\begin{figure}[hp]
\centering
\includegraphics[width=8cm]{../exercise1/part7/screenshots/part7_1.png}
\caption{Uden transformationer}
\label{fig:1-7-1}
\end{figure}

\begin{figure}[hp]
\centering
\includegraphics[width=8cm]{../exercise1/part7/screenshots/part7_2.png}
\caption{Enhedsterning: TRS}
\label{fig:1-7-2}
\end{figure}

\begin{figure}[hp]
\centering
\includegraphics[width=8cm]{../exercise1/part7/screenshots/part7_3.png}
\caption{Enhedsterning: SRT}
\label{fig:1-7-3}
\end{figure}

\section{Del 8}
\label{sec:del-8}

Idet, der i denne opgave skal laves et front-perspektiv
(etpunktsperspektiv), viewplanet går igennem $(0,0,0)$ og kameraet er
placeret i $(20,5,5)$ kan \emph{at}-punktet fx være at finde i
$(20,5,-20)$, da et etpunksperspektiv har ét \emph{principal face} der
er parallel med viewplanet.

For at få en ordentligt billede af kassen, har vi valgt også at lave
den med sidestørrelse $2$ i stedet for $10$. Endvidere har vi lavet
kassen solid, med optegnede kanter, så perspektiv og aksernes
placering er nemmere at vurdere. Frontperspektivet af kassen med
sidestørrelse $10$ kan ses på figur \ref{fig:1-8-1}, mens kassen med
sidestørrelse $2$ kan ses på figur \ref{fig:1-8-2}.

I stedet for at ændre sidestørrelsen, kunne vi for at få et ordentligt
billede også have translateret kassen til et andet punkt, eller
ændret \emph{fov}-vinklen til fx. $90$. Det første ville naturligvis
kunne give et billede af hele kassen ved at placere den længere ude af
x-aksen samt under kameraet, mens en forstørrelse af \emph{fov} ville
fungere som at zoome ud.

Den lille hvide prik på begge billeder angiver forsvindingspunktet på
horisonten for det brugte \emph{at}-punkt.

\begin{figure}[hp]
\centering
\includegraphics[width=8cm]{../exercise1/part8/screenshots/part8_1.png}
\caption{Frontperspektiv (etpunktsperspektiv) (sidestørrelse: 10)}
\label{fig:1-8-1}
\end{figure}

\begin{figure}[hp]
\centering
\includegraphics[width=8cm]{../exercise1/part8/screenshots/part8_2.png}
\caption{Frontperspektiv (etpunktsperspektiv) (sidestørrelse: 2)}
\label{fig:1-8-2}
\end{figure}

Udover frontperspektivet, skulle der også laves et X-perspektiv
(topunktsperspektiv). I et topunktsperspektiv er netop én akse i
motivet parallel med viewplanet. Resultatet kan ses på figur
\ref{fig:1-8-3}. Terningen har sidelængder $2$ i stedet for $10$ for
at få et ordentligt billede, der korrekt viser perspektivet.


\begin{figure}[hp]
\centering
\includegraphics[width=8cm]{../exercise1/part8/screenshots/part8_3.png}
\caption{X-perspektiv (topunktsperspektiv) (sidestørrelse: 2)}
\label{fig:1-8-3}
\end{figure}


%%% Local Variables:
%%% mode: latex
%%% TeX-master: "report_main"
%%% End: 